#+title: Lab 3

#+begin_src jupyter-julia
include("main.jl") 
#+end_src

#+RESULTS:
: # Out[94]:
: : read_dataframe (generic function with 1 method)

* Loading libraries
#+begin_src jupyter-julia
using CSV
using DataFrames
#+end_src

#+RESULTS:
: # Out[2]:

* Loading dataset
#+begin_src jupyter-julia
X_chips, y_chips = read_dataframe("./data/chips.csv");
X_geyser, y_geyser = read_dataframe("./data/geyser.csv");
#+end_src

#+RESULTS:
: # Out[3]:

* Finding best
#+begin_src jupyter-julia :results drawer
res_chips = find_best(X_chips, y_chips)
#+end_src

#+RESULTS:
:results:
# Out[116]:
#+BEGIN_EXAMPLE julia
  80-element Vector{Any}:
  (0.5085470085470085, (:linear, (), 0.05))
  (0.5, (:linear, (), 0.1))
  (0.4914529914529915, (:linear, (), 0.5))
  (0.4995726495726496, (:linear, (), 1.0))
  (0.5508547008547009, (:linear, (), 5.0))
  (0.4997863247863248, (:linear, (), 10.0))
  (0.5596153846153846, (:linear, (), 50.0))
  (0.5258547008547008, (:linear, (), 100.0))
  (0.4914529914529915, (:polynomial, 2, 0.05))
  (0.4914529914529915, (:polynomial, 2, 0.1))
  (0.7371794871794872, (:polynomial, 2, 0.5))
  (0.736965811965812, (:polynomial, 2, 1.0))
  (0.7286324786324786, (:polynomial, 2, 5.0))
  ⋮
  (0.7630341880341881, (:gauss, 4, 5.0))
  (0.7544871794871795, (:gauss, 4, 10.0))
  (0.7544871794871795, (:gauss, 4, 50.0))
  (0.7544871794871795, (:gauss, 4, 100.0))
  (0.5085470085470085, (:gauss, 5, 0.05))
  (0.5085470085470085, (:gauss, 5, 0.1))
  (0.7294871794871794, (:gauss, 5, 0.5))
  (0.7797008547008547, (:gauss, 5, 1.0))
  (0.7544871794871795, (:gauss, 5, 5.0))
  (0.7544871794871795, (:gauss, 5, 10.0))
  (0.7544871794871795, (:gauss, 5, 50.0))
  (0.7544871794871795, (:gauss, 5, 100.0))
#+END_EXAMPLE
:end:

#+begin_src jupyter-julia :results drawer
res_geyser = find_best(X_geyser, y_geyser)
#+end_src
#+RESULTS:
:results:
# Out[114]:
#+BEGIN_EXAMPLE julia
  80-element Vector{Any}:
  (0.8962626262626262, (:linear, (), 0.05))
  (0.8962626262626262, (:linear, (), 0.1))
  (0.9052525252525253, (:linear, (), 0.5))
  (0.9007070707070707, (:linear, (), 1.0))
  (0.8962626262626262, (:linear, (), 5.0))
  (0.8690909090909091, (:linear, (), 10.0))
  (0.877979797979798, (:linear, (), 50.0))
  (0.8605050505050504, (:linear, (), 100.0))
  (0.8380808080808082, (:polynomial, 2, 0.05))
  (0.7462626262626263, (:polynomial, 2, 0.1))
  (0.6891919191919191, (:polynomial, 2, 0.5))
  (0.7569696969696971, (:polynomial, 2, 1.0))
  (0.6571717171717172, (:polynomial, 2, 5.0))
  ⋮
  (0.833030303030303, (:gauss, 4, 5.0))
  (0.833030303030303, (:gauss, 4, 10.0))
  (0.833030303030303, (:gauss, 4, 50.0))
  (0.8420202020202019, (:gauss, 4, 100.0))
  (0.6036363636363636, (:gauss, 5, 0.05))
  (0.6036363636363636, (:gauss, 5, 0.1))
  (0.8334343434343434, (:gauss, 5, 0.5))
  (0.833030303030303, (:gauss, 5, 1.0))
  (0.8285858585858585, (:gauss, 5, 5.0))
  (0.8285858585858585, (:gauss, 5, 10.0))
  (0.8285858585858585, (:gauss, 5, 50.0))
  (0.824141414141414, (:gauss, 5, 100.0))
#+END_EXAMPLE
:end:

#+begin_src jupyter-julia :results drawer
best_chips = best_by_kernels(res_chips) 
#+end_src

#+RESULTS:
:results:
# Out[113]:
#+BEGIN_EXAMPLE julia
  Dict{Any, Any} with 3 entries:
  :polynomial => (0.75406, (:polynomial, 2, 5.0))
  :linear     => (0.551282, (:linear, (), 100.0))
  :gauss      => (0.804915, (:gauss, 1, 1.0))
#+END_EXAMPLE
:end:

#+begin_src jupyter-julia :results drawer
best_geyser = best_by_kernels(res_geyser) 
#+end_src

#+RESULTS:
:results:
# Out[112]:
#+BEGIN_EXAMPLE julia
  Dict{Any, Any} with 3 entries:
  :polynomial => (0.838182, (:polynomial, 2, 0.1))
  :linear     => (0.909697, (:linear, (), 1.0))
  :gauss      => (0.896263, (:gauss, 1, 0.5))
#+END_EXAMPLE
:end:


* Plots
#+begin_src jupyter-julia
using Plots 
using IterTools
#+end_src

#+RESULTS:
: # Out[6]:

** Dataset plots
#+begin_src jupyter-julia
Xm_chips = reduce(hcat, X_chips)
Xm_geyser = reduce(hcat, X_geyser)

function split_classes_for_plot(X, y)
    pN((x, y)) = y == -1
    pP((x, y)) = y == 1
    d((x, y)) = x
    XN = d.(filter(pN, collect(zip(X, y))))
    XP = d.(filter(pP, collect(zip(X, y))))
    return (XN, XP)
end
XN_chips, XP_chips = split_classes_for_plot(X_chips, y_chips)
XmN_chips = reduce(hcat, XN_chips)
XmP_chips = reduce(hcat, XP_chips)

XN_geyser, XP_geyser = split_classes_for_plot(X_geyser, y_geyser)
XmN_geyser = reduce(hcat, XN_geyser)
XmP_geyser = reduce(hcat, XP_geyser)
#+end_src

#+RESULTS:
: # Out[7]:
: #+BEGIN_EXAMPLE
:   2×88 Matrix{Float64}:
:   1.0  1.0  1.0  1.0  2.0  2.0  2.0  …  23.0  23.0  23.0  23.0  23.0  23.0
:   4.0  2.3  1.7  1.7  1.7  3.7  3.1      4.0   1.8   1.8   2.1   2.1   2.0
: #+END_EXAMPLE


#+begin_src jupyter-julia :results raw drawer
scatter_chips1 = scatter(XmN_chips[1, :], XmN_chips[2, :], c = :blue)
scatter_chips = scatter!(scatter_chips1, XmP_chips[1, :], XmP_chips[2, :], c = :red)
#+end_src


#+RESULTS:
:results:
# Out[8]:
[[file:./obipy-resources/Fj5GZc.svg]]
:end:

#+begin_src jupyter-julia :results raw drawer
scatter_geyser1 = scatter(XmN_geyser[1, :], XmN_geyser[2, :], c = :blue)
scatter_geyser = scatter!(scatter_geyser1, XmP_geyser[1, :], XmP_geyser[2, :], c = :red)
#+end_src

#+RESULTS:
:results:
# Out[9]:
[[file:./obipy-resources/7mfeot.svg]]
:end:

#+begin_src jupyter-julia
function with_scatter(p, XmN, XmP)
    scatter1 = scatter(p, XmN[1, :], XmN[2, :], c = :red, label = "N")
    scatter(scatter1, XmP[1, :], XmP[2, :], c = :blue, label = "P")
end

function plot_best(best, kern, X, y)
    Xm = reduce(hcat, X)
    XN, XP = split_classes_for_plot(X, y)
    XmN = reduce(hcat, XN)
    XmP = reduce(hcat, XP)

    _, (kern, kern_param, C) = best[kern]
    cls = mk_svc(kern, kern_param, size(X)[1]; C=C)
    fit_svc(cls, X, y)

    f(x1, x2) = predict(cls, [x1, x2])
    rx = range(minimum(Xm[1, :]),stop=maximum(Xm[1, :]),length=100)
    ry = range(minimum(Xm[2, :]),stop=maximum(Xm[2, :]),length=100)

    p = heatmap(rx, ry, f, c = :redsblues, clims=(-1, 1))
    with_scatter(p, XmN, XmP)
end
#+end_src

#+RESULTS:
: # Out[126]:
: : plot_best (generic function with 1 method)

** chips

#+begin_src jupyter-julia :results raw drawer
X_df, y_df, best_df = X_chips, y_chips, best_chips
p1 = plot_best(best_df, :linear, X_df, y_df)
p2 = plot_best(best_df, :polynomial, X_df, y_df)
p3 = plot_best(best_df, :gauss, X_df, y_df)
plot(p1, p2, p3, size=(1280, 720), title = ["linear" "polynomial" "gauss"])
#+end_src

#+RESULTS:
:results:
# Out[127]:
[[file:./obipy-resources/GInZfP.svg]]
:end:

** geyser


#+begin_src jupyter-julia :results raw drawer
X_df, y_df, best_df = X_geyser, y_geyser, best_geyser
p1 = plot_best(best_df, :linear, X_df, y_df)
p2 = plot_best(best_df, :polynomial, X_df, y_df)
p3 = plot_best(best_df, :gauss, X_df, y_df)
plot(p1, p2, p3, size=(1280, 720), title = ["linear" "polynomial" "gauss"])
#+end_src

#+RESULTS:
:results:
# Out[128]:
[[file:./obipy-resources/329TXZ.svg]]
:end:
