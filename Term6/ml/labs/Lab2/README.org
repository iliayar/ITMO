#+title: Lab 2

#+begin_src jupyter-julia
include("./main.jl") 
#+end_src

#+RESULTS:
: # Out[1]:
: : compute (generic function with 2 methods)


#+begin_src jupyter-julia
using Plots  
#+end_src

#+RESULTS:
: # Out[2]:


* Loading Dataset
#+begin_src jupyter-julia
train, test = read_data("6.txt")
# my_normalize!(train)
# my_normalize!(test)
#+end_src

#+RESULTS:
: # Out[111]:
: : (Object[Object([408722.0, 2.291538e6, -169150.0, -1.483342e6, 413922.0, -704453.0, -92699.0, -3.548409e6, -989230.0, -1.020999e6  …  -1.487257e6, -63121.0, 4.148053e6, -1.381833e6, 290743.0, 1.73759e6, -1.012172e6, 267434.0, -6.051783e6, -105110.0], -1.4977921e7), Object([396087.0, 2.363326e6, -185302.0, -1.452219e6, 369543.0, -713351.0, -93671.0, -3.246388e6, -1.014598e6, -1.102007e6  …  -1.467141e6, -60163.0, 4.316413e6, -1.410232e6, 290743.0, 1.737934e6, -1.039502e6, 266302.0, -6.136733e6, -121847.0], -1.3028496e7), Object([363970.0, 2.685576e6, -214895.0, -1.441703e6, 353947.0, -791731.0, -102800.0, -2.966865e6, -1.139072e6, -1.455312e6  …  -1.55089e6, -59764.0, 5.132449e6, -1.620077e6, 290743.0, 1.748456e6, -1.173609e6, 253795.0, -6.791075e6, -260038.0], -1.0257434e7), Object([375463.0, 2.470586e6, -212480.0, -1.396552e6, 290212.0, -723918.0, -94785.0, -2.718795e6, -1.051747e6, -1.223774e6  …  -1.42474e6, -54832.0, 4.563686e6, -1.446819e6, 290743.0, 1.737812e6, -1.079527e6, 265135.0, -6.244293e6, -142380.0], -9.746231e6), Object([369162.0, 2.554821e6, -216563.0, -1.4048e6, 301764.0, -747679.0, -97577.0, -2.737332e6, -1.085187e6, -1.315248e6  …  -1.461446e6, -55823.0, 4.782127e6, -1.508683e6, 290743.0, 1.741326e6, -1.115554e6, 261234.0, -6.438574e6, -183871.0], -9.644866e6), Object([358422.0, 2.693799e6, -223899.0, -1.416602e6, 318257.0, -786343.0, -102117.0, -2.752873e6, -1.14021e6, -1.466313e6  …  -1.519574e6, -57279.0, 5.141685e6, -1.6096e6, 290743.0, 1.746999e6, -1.174836e6, 254903.0, -6.755297e6, -251443.0], -8.956798e6), Object([363731.0, 2.585378e6, -223530.0, -1.391276e6, 282482.0, -751384.0, -97981.0, -2.606475e6, -1.095962e6, -1.34975e6  …  -1.452511e6, -54537.0, 4.85366e6, -1.520595e6, 290743.0, 1.741454e6, -1.127163e6, 260768.0, -6.474148e6, -190860.0], -8.616849e6), Object([346407.0, 2.757764e6, -239610.0, -1.384898e6, 273070.0, -793089.0, -102836.0, -2.45068e6, -1.162487e6, -1.53881e6  …  -1.4963e6, -54248.0, 5.289845e6, -1.632371e6, 290743.0, 1.74703e6, -1.198837e6, 254121.0, -6.822597e6, -264417.0], -6.97616e6), Object([380029.0, 2.174535e6, -228793.0, -1.275254e6, 118419.0, -612947.0, -81567.0, -1.88468e6, -926644.0, -909664.0  …  -1.171376e6, -42148.0, 3.75289e6, -1.170543e6, 290743.0, 1.719048e6, -944743.0, 284146.0, -5.366416e6, 48498.0], -6.678382e6), Object([354406.0, 2.594484e6, -239048.0, -1.346778e6, 219222.0, -740448.0, -96608.0, -2.230376e6, -1.095852e6, -1.363269e6  …  -1.395333e6, -50120.0, 4.856097e6, -1.498345e6, 290743.0, 1.73868e6, -1.127044e6, 262953.0, -6.399238e6, -173190.0], -6.605667e6)  …  Object([-407755.0, 4.455837e6, -1.415799e6, 1.742055e6, -4.174438e6, -292246.0, -37626.0, 2.4608678e7, -1.566307e6, -3.646106e6  …  2.200253e6, 253962.0, 8.156701e6, -779906.0, 290743.0, 1.589083e6, -1.633905e6, 364636.0, -3.780017e6, 506647.0], 1.43941647e8), Object([-414829.0, 4.517265e6, -1.4231e6, 1.749056e6, -4.184512e6, -305701.0, -39182.0, 2.4703579e7, -1.589624e6, -3.713853e6  …  2.191019e6, 254536.0, 8.309924e6, -816722.0, 290743.0, 1.590741e6, -1.659027e6, 362539.0, -3.894192e6, 482743.0], 1.44923109e8), Object([-436520.0, 4.854927e6, -1.433244e6, 1.697263e6, -4.111583e6, -406518.0, -51065.0, 2.4473233e7, -1.725207e6, -4.079033e6  …  2.018646e6, 248695.0, 9.194297e6, -1.076649e6, 290743.0, 1.60613e6, -1.805102e6, 345827.0, -4.71256e6, 307284.0], 1.45039344e8), Object([-426693.0, 4.665095e6, -1.431671e6, 1.738814e6, -4.170255e6, -346140.0, -43925.0, 2.470631e7, -1.647963e6, -3.874725e6  …  2.132304e6, 253218.0, 8.691307e6, -922593.0, 290743.0, 1.596615e6, -1.72188e6, 355936.0, -4.226204e6, 411995.0], 1.45447636e8), Object([-432894.0, 4.758284e6, -1.434845e6, 1.725646e6, -4.151728e6, -373628.0, -47163.0, 2.4652119e7, -1.685289e6, -3.975599e6  …  2.086249e6, 251718.0, 8.934853e6, -993610.0, 290743.0, 1.600784e6, -1.762095e6, 351389.0, -4.44968e6, 364121.0], 1.45551813e8), Object([-435628.0, 4.715041e6, -1.44316e6, 1.761224e6, -4.202205e6, -352105.0, -44574.0, 2.4922735e7, -1.66555e6, -3.931146e6  …  2.147318e6, 255351.0, 8.808088e6, -941868.0, 290743.0, 1.596802e6, -1.740828e6, 355192.0, -4.283709e6, 400720.0], 1.4677996e8), Object([-448699.0, 4.898009e6, -1.450955e6, 1.740078e6, -4.17252e6, -404676.0, -50758.0, 2.485555e7, -1.73845e6, -4.129578e6  …  2.063234e6, 252876.0, 9.284072e6, -1.078303e6, 290743.0, 1.60466e6, -1.81937e6, 346533.0, -4.712536e6, 309021.0], 1.47262353e8), Object([-459409.0, 5.009005e6, -1.460533e6, 1.741849e6, -4.175262e6, -432224.0, -53970.0, 2.493641e7, -1.781476e6, -4.251123e6  …  2.031894e6, 252829.0, 9.566012e6, -1.151763e6, 290743.0, 1.608413e6, -1.865725e6, 342120.0, -4.941829e6, 260519.0], 1.47987787e8), Object([-473542.0, 5.093524e6, -1.478255e6, 1.774593e6, -4.221968e6, -443860.0, -55258.0, 2.5259509e7, -1.811662e6, -4.346185e6  …  2.050324e6, 255922.0, 9.766049e6, -1.187684e6, 290743.0, 1.609089e6, -1.898247e6, 340562.0, -5.050085e6, 238911.0], 1.50399929e8), Object([-477231.0, 5.092603e6, -1.484764e6, 1.794415e6, -4.250137e6, -437730.0, -54500.0, 2.542408e7, -1.809677e6, -4.346762e6  …  2.077307e6, 257899.0, 9.754455e6, -1.174428e6, 290743.0, 1.60768e6, -1.896108e6, 341738.0, -5.006266e6, 248995.0], 1.51248977e8)], Object[Object([-334600.0, 4.071073e6, -1.319751e6, 1.546714e6, -3.896039e6, -253044.0, -33469.0, 2.2752299e7, -1.432687e6, -3.209648e6  …  2.054008e6, 235268.0, 7.267649e6, -645886.0, 290743.0, 1.589219e6, -1.489945e6, 369070.0, -3.384989e6, 582426.0], 1.32435511e8), Object([25348.0, 3.510487e6, -737886.0, -68342.0, -1.599562e6, -591772.0, -76496.0, 8.964748e6, -1.347202e6, -2.467371e6  …  48600.0, 75443.0, 6.593124e6, -1.298838e6, 290743.0, 1.681848e6, -1.397845e6, 299115.0, -5.620874e6, 43427.0], 5.6828837e7), Object([-150209.0, 3.38344e6, -1.054519e6, 915882.0, -2.998102e6, -266805.0, -36434.0, 1.7087832e7, -1.217009e6, -2.407105e6  …  1.413113e6, 173784.0, 5.810228e6, -585982.0, 290743.0, 1.609034e6, -1.257577e6, 360813.0, -3.274339e6, 580342.0], 9.9337648e7), Object([-233410.0, 4.180723e6, -1.134261e6, 961546.0, -3.064609e6, -454881.0, -58296.0, 1.7943056e7, -1.523361e6, -3.282792e6  …  1.232374e6, 176732.0, 7.820025e6, -1.092637e6, 290743.0, 1.633701e6, -1.587636e6, 331000.0, -4.851739e6, 248032.0], 1.07421591e8), Object([42460.0, 3.073897e6, -743841.0, 56041.0, -1.775456e6, -444335.0, -59013.0, 9.740857e6, -1.167184e6, -1.999792e6  …  348822.0, 88717.0, 5.422861e6, -926155.0, 290743.0, 1.657962e6, -1.203896e6, 324021.0, -4.441417e6, 298317.0], 5.9000926e7), Object([329119.0, 2.385954e6, -300254.0, -1.111666e6, -114502.0, -617751.0, -81775.0, -396052.0, -995448.0, -1.153984e6  …  -1.015237e6, -26270.0, 4.215155e6, -1.208321e6, 290743.0, 1.715065e6, -1.018871e6, 284941.0, -5.464605e6, 34317.0], 2.18563e6), Object([106101.0, 3.115784e6, -629401.0, -298701.0, -1.271374e6, -560474.0, -73338.0, 6.810744e6, -1.21259e6, -2.017244e6  …  -141801.0, 53280.0, 5.695093e6, -1.180465e6, 290743.0, 1.684069e6, -1.252817e6, 301942.0, -5.278978e6, 106534.0], 4.3649848e7), Object([-339060.0, 4.20036e6, -1.316929e6, 1.506693e6, -3.839421e6, -297653.0, -38764.0, 2.2495914e7, -1.486257e6, -3.347858e6  …  1.960808e6, 231020.0, 7.615687e6, -758281.0, 290743.0, 1.596514e6, -1.547661e6, 361511.0, -3.740999e6, 505390.0], 1.31651477e8), Object([-62514.0, 3.300292e6, -908376.0, 496182.0, -2.401449e6, -370645.0, -49462.0, 1.3542142e7, -1.219115e6, -2.282605e6  …  872973.0, 132125.0, 5.794239e6, -797683.0, 290743.0, 1.635289e6, -1.259846e6, 340090.0, -3.986653e6, 412463.0], 8.0165777e7), Object([187393.0, 4.198277e6, -398840.0, -1.25677e6, 88065.0, -1.119327e6, -140653.0, -525426.0, -1.712253e6, -3.12463e6  …  -1.761392e6, -44376.0, 8.899813e6, -2.518698e6, 290743.0, 1.788429e6, -1.791145e6, 202876.0, -9.576199e6, -842560.0], 9.566789e6)  …  Object([398469.0, 2.207874e6, -193894.0, -1.388448e6, 279225.0, -655058.0, -86727.0, -2.807751e6, -948901.0, -937078.0  …  -1.333997e6, -53496.0, 3.890638e6, -1.265113e6, 290743.0, 1.728076e6, -968722.0, 276288.0, -5.675605e6, -21581.0], -1.1395588e7), Object([-382439.0, 4.298605e6, -1.384535e6, 1.68627e6, -4.094838e6, -269074.0, -35040.0, 2.4050336e7, -1.509731e6, -3.469672e6  …  2.172876e6, 248719.0, 7.782178e6, -709813.0, 290743.0, 1.587468e6, -1.572951e6, 367828.0, -3.567792e6, 549348.0], 1.40331436e8), Object([198181.0, 4.202715e6, -379659.0, -1.3156e6, 171666.0, -1.137953e6, -142954.0, -1.012842e6, -1.718807e6, -3.124781e6  …  -1.841994e6, -50247.0, 8.938571e6, -2.559187e6, 290743.0, 1.792671e6, -1.798207e6, 199317.0, -9.709833e6, -873249.0], 7.001922e6), Object([72587.0, 4.145571e6, -603412.0, -628042.0, -805388.0, -918933.0, -115901.0, 4.680595e6, -1.640151e6, -3.117252e6  …  -898378.0, 18388.0, 8.472179e6, -2.082441e6, 290743.0, 1.742908e6, -1.713464e6, 241131.0, -8.136955e6, -512229.0], 3.6938184e7), Object([187145.0, 2.941829e6, -502307.0, -638912.0, -787510.0, -617696.0, -80751.0, 3.873133e6, -1.172853e6, -1.799777e6  …  -547263.0, 19725.0, 5.410678e6, -1.280466e6, 290743.0, 1.701631e6, -1.210005e6, 289479.0, -5.63267e6, 17842.0], 2.7298231e7), Object([76013.0, 4.279188e6, -586479.0, -711600.0, -686904.0, -977590.0, -122930.0, 4.064121e6, -1.698979e6, -3.256715e6  …  -1.051544e6, 9792.0, 8.85156e6, -2.225502e6, 290743.0, 1.753379e6, -1.776844e6, 230896.0, -8.594052e6, -612442.0], 3.4263968e7), Object([-209805.0, 4.273084e6, -1.085514e6, 792271.0, -2.824219e6, -528606.0, -67268.0, 1.6587972e7, -1.573177e6, -3.370279e6  …  976268.0, 159676.0, 8.134302e6, -1.262623e6, 290743.0, 1.648686e6, -1.641307e6, 317520.0, -5.403353e6, 124328.0], 1.00647104e8), Object([47922.0, 4.521618e6, -615596.0, -683055.0, -727962.0, -1.030417e6, -129037.0, 4.446291e6, -1.790928e6, -3.524159e6  …  -1.086752e6, 12149.0, 9.455841e6, -2.370215e6, 290743.0, 1.759861e6, -1.875909e6, 222673.0, -9.042715e6, -706332.0], 3.7369637e7), Object([142413.0, 2.496731e6, -616829.0, -185605.0, -1.43086e6, -370244.0, -50883.0, 7.384167e6, -962530.0, -1.34919e6  …  198659.0, 65796.0, 4.065263e6, -692362.0, 290743.0, 1.654596e6, -983406.0, 333622.0, -3.740287e6, 437068.0], 4.3934951e7), Object([-119102.0, 2.977798e6, -1.033524e6, 951585.0, -3.048025e6, -153580.0, -23136.0, 1.7143653e7, -1.056306e6, -1.966284e6  …  1.584465e6, 178158.0, 4.760183e6, -290632.0, 290743.0, 1.592389e6, -1.084439e6, 379366.0, -2.347249e6, 778183.0], 9.7828016e7)])

* Finding best
** Least Squares
#+begin_src jupyter-julia
res = []
loss = mk_loss(:SMAPE)
for regularization in [:no, :ridge]
    if regularization == :no
        m = mk_model(
            :LeastSquares,
            mk_least_square_regularization(:no),
        )
        w = compute(m, train)
        append!(res, [(calc_loss(loss, w, test), (regularization))])
    elseif regularization == :ridge
        for _ in 1:10
            τ = rand(-2:20)
            m = mk_model(
                :LeastSquares,
                mk_least_square_regularization(:ridge, τ),
            )
            w = compute(m, train)
            append!(res, [(calc_loss(loss, w, test), (regularization, τ))])
        end
    end
end
find_best(res)
#+end_src

#+RESULTS:
: # Out[161]:
: : (0.0052316946619896856, (:ridge, 12))

** SGD with MSE
#+begin_src jupyter-julia
  Params: (800, 100, :factor, 0.3, 0.2, 0.00033546262790251185)
Loss: 0.9999999995036284
======================
Params: (500, 150, :factor, 1.0, 0.0, 148.4131591025766)
Loss: 0.9915697595386919
======================
Params: (700, 100, :factor, 0.3, 0.9, 0.01831563888873418)
Loss: 1.0
======================
Params: (1000, 200, :iter, 0.0, 10, 20.085536923187668)
grad norm is NaN
Loss: NaN
======================
Params: (1000, 50, :factor, 0.3, 0.0, 0.0024787521766663585)
Loss: 0.9764951783997626
======================
Params: (700, 200, :factor, 0.1, 0.2, 0.36787944117144233)
Loss: 0.999999999148384
======================
Params: (800, 50, :factor, 1.0, 0.7, 1096.6331584284585)
Loss: 1.0
======================
Params: (900, 50, :factor, 0.1, 0.8, 0.0009118819655545162)
Loss: 1.0
======================
Params: (800, 100, :factor, 0.0, 0.4, 2980.9579870417283)
grad norm is NaN
Loss: NaN
======================
Params: (700, 100, :factor, 0.5, 0.3, 403.4287934927351)
Loss: 0.38611595219123984
======================
Params: (500, 150, :iter, 0.1, 3, 0.36787944117144233)
Loss: 1.0
======================
(0.38611595219123984, (700, 100, :factor, 0.5, 0.3, 403.4287934927351))
#+end_src

** SGD with SMAPE
#+begin_src 
 Params: (600, 100, :iter, 0.7, 2, 54.598150033144236)
Loss: 0.8758378580226013
======================
Params: (500, 150, :factor, 0.8, 0.8, 8103.083927575384)
grad norm is NaN
Loss: NaN
======================
Params: (900, 200, :iter, 0.3, 1, 20.085536923187668)
Loss: 0.7635889654554721
======================
Params: (800, 100, :iter, 0.7, 5, 2.718281828459045)
Loss: 0.40869340073772736
======================
Params: (700, 150, :factor, 0.5, 0.7, 1096.6331584284585)
Loss: 1.0
======================
Params: (900, 150, :factor, 0.4, 0.1, 7.38905609893065)
Loss: 0.6009945752977576
======================
Params: (700, 200, :iter, 0.9, 10, 20.085536923187668)
Loss: 0.763962682892323
======================
Params: (900, 200, :factor, 0.9, 0.5, 2980.9579870417283)
grad norm is NaN
Loss: NaN
======================
Params: (800, 200, :factor, 0.8, 0.9, 0.00033546262790251185)
Loss: 0.38934112557822426
======================
Params: (600, 50, :factor, 0.6, 0.9, 0.00012340980408667956)
Loss: 0.015040756667538078
======================
Params: (600, 100, :factor, 0.6, 0.6, 148.4131591025766)
Loss: 0.9386416874689738
======================
Params: (500, 200, :iter, 0.0, 2, 0.36787944117144233)
Loss: 0.03799896290356693
======================
Params: (600, 100, :factor, 0.4, 0.3, 403.4287934927351)
Loss: 0.9697738974580693
======================
Params: (800, 200, :factor, 0.4, 0.2, 0.1353352832366127)
Loss: 0.034284464536347814
======================
Params: (700, 200, :factor, 0.6, 0.3, 54.598150033144236)
Loss: 0.8736914022663183
======================
Params: (800, 100, :iter, 0.7, 7, 20.085536923187668)
Loss: 0.7657354885754014
======================
Params: (1000, 50, :factor, 0.5, 0.7, 0.0024787521766663585)
Loss: 0.02895688488481395
======================
Params: (900, 150, :iter, 1.0, 1, 4.5399929762484854e-5)
Loss: 0.9986345948305239
======================
Params: (600, 150, :factor, 0.6, 0.2, 0.0009118819655545162)
Loss: 0.9926736985018997
======================
Params: (700, 150, :factor, 0.6, 0.3, 0.049787068367863944)
Loss: 0.026271462769225422
======================
(0.015040756667538078, (600, 50, :factor, 0.6, 0.9, 0.00012340980408667956))
#+end_src

* Least Squares
#+begin_src jupyter-julia :results raw drawer :async t
loss = mk_loss(:SMAPE)
ys = []
xs = []
for τ in -1:15
    m = mk_model(
        :LeastSquares,
        mk_least_square_regularization(:ridge, exp(τ)),
    )
    w = compute(m, train)
    append!(xs, τ)
    append!(ys, calc_loss(loss, w, test))
end
plot(xs, ys)
#+end_src

#+RESULTS:
:results:
# Out[145]:
[[file:./obipy-resources/JLKAEA.svg]]
:end:

#+begin_src jupyter-julia :results raw drawer
loss = mk_loss(:MSE)
ys = []
xs = []
for τ in -1:15
    m = mk_model(
        :LeastSquares,
        mk_least_square_regularization(:ridge, exp(τ)),
    )
    w = compute(m, train)
    append!(xs, τ)
    append!(ys, calc_loss(loss, w, test))
end
plot(xs, ys)
#+end_src

#+RESULTS:
:results:
# Out[146]:
[[file:./obipy-resources/mgQ1Ji.svg]]
:end:
* Gradient descent
** MSE
#+begin_src jupyter-julia :results raw drawer
ntrain = copy(train)
ntest = copy(test)
my_normalize!(ntrain)
my_normalize!(ntest)
steps, b, step_ch, μ, μ_param, τ = (700, 100, :factor, 0.5, 0.3, 403.4287934927351)
m = mk_model(
    :SGD,
    mk_sgd_loss_with_regularization(
        mk_loss(:MSE),
        mk_sgd_regularization(:lasso, τ),
    ),
    mk_sgd_init(:cool),
    steps,
    b,
    μ,
    mk_sgd_step_change(:iter, μ_param),
    0.2,
)
l = mk_loss(:SMAPE)
log = []
w = compute(m, ntrain; log=log)
log = map(x -> log10(x), log)
plot(log)
#+end_src

#+RESULTS:
:results:
# Out[86]:
[[file:./obipy-resources/gOvOLx.svg]]
:end:

** SMAPE
#+begin_src jupyter-julia :results raw drawer
steps, b, step_ch, μ, μ_param, τ = (2000, 50, :factor, 0.6, 0.9, 0.00012340980408667956)
m = mk_model(
    :SGD,
    mk_sgd_loss_with_regularization(
        mk_loss(:SMAPE),
        mk_sgd_regularization(:lasso, τ),
    ),
    mk_sgd_init(:cool),
    steps,
    b,
    μ,
    mk_sgd_step_change(:iter, μ_param),
    0.2,
)
l = mk_loss(:SMAPE)
log = []
w = compute(m, train; log=log)
plot(log)
#+end_src

#+RESULTS:
:results:
# Out[50]:
[[file:./obipy-resources/c0IVx6.svg]]
:end:

* Results
#+begin_src jupyter-julia
function show_res(m, train, test)
    w = compute(m, train)
    smape = mk_loss(:SMAPE)
    nrmse = mk_loss(:NRMSE)
    smape_val = calc_loss(smape, w, test)
    nrmse_val = calc_loss(nrmse, w, test)
    println("SMAPE: ", smape_val)
    println("NRMSE: ", nrmse_val)
end

#+end_src

#+RESULTS:
: # Out[94]:
: : show_res (generic function with 1 method)

** Least Squares
#+begin_src jupyter-julia :results output raw drawer
regularization, τ = (:ridge, 12)
m = mk_model(
    :LeastSquares,
    mk_least_square_regularization(:ridge, τ),
)
show_res(m, train, test)
#+end_src

#+RESULTS:
:results:
SMAPE: 0.0026158473309948428
NRMSE: 0.0002482270324362639
:end:

** SGD with SMAPE
#+begin_src jupyter-julia :results output raw drawer
steps, b, step_ch, μ, μ_param, τ = (2000, 50, :factor, 0.6, 0.9, 0.00012340980408667956)
m = mk_model(
    :SGD,
    mk_sgd_loss_with_regularization(
        mk_loss(:SMAPE),
        mk_sgd_regularization(:lasso, τ),
    ),
    mk_sgd_init(:cool),
    steps,
    b,
    μ,
    mk_sgd_step_change(:iter, μ_param),
    0.2,
)
show_res(m, train, test)
#+end_src

#+RESULTS:
:results:
SMAPE: 0.2909611336720679
NRMSE: 0.1560110053183087
:end:
** SGD with MSE
#+begin_src jupyter-julia :results output raw drawer
ntrain = copy(train)
ntest = copy(test)
my_normalize!(ntrain)
my_normalize!(ntest)
steps, b, step_ch, μ, μ_param, τ = (700, 100, :factor, 0.5, 0.3, 403.4287934927351)
m = mk_model(
    :SGD,
    mk_sgd_loss_with_regularization(
        mk_loss(:MSE),
        mk_sgd_regularization(:lasso, τ),
    ),
    mk_sgd_init(:cool),
    steps,
    b,
    μ,
    mk_sgd_step_change(:iter, μ_param),
    0.2,
)
show_res(m, ntrain, ntest)
#+end_src

#+RESULTS:
:results:
SMAPE: 0.3894110871949524
NRMSE: 0.2677131241416301
:end:
