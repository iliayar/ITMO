#+LATEX_CLASS: general
#+TITLE: Лекция 5
#+AUTHOR: Ilya Yaroshevskiy

* Программы
 программа(функция)
- \(P: \alpha \to \beta\) --- берет \(\alpha\), возвращает \(\beta\)
- \(P\) --- доказательство, что из \(\alpha\) следует \(\beta\)
  #+begin_examp org
  \-
  #+begin_src haskell
  f a = a
  #+end_src
  \(f: A \to A\) --- \(f\) доказывает что, из \(A\) следует \(A\)
  #+end_examp

| логическок исчесления | Типизированное \lambda-исчесление           |
|-----------------------+---------------------------------------------|
| логическая формула    | тип                                         |
| доказательство        | значение                                    |
| доказуемая формула    | обитаемый тип(имеет хотя бы один экземпляр) |
| \to                   | функция                                     |
| &                     | упорядоченная пара                          |
| \vee                  | алг. тип(тип-сумма)                         |
#+begin_examp org
\(5\) доказывает Int
#+end_examp
#+begin_examp org
Список:
#+begin_src pascal
  Type list = Record
     Nul: boolean;
     case Nul of
       True  : ;
       False : Next: ^list;
  end;
#+end_src
#+begin_src C
  struct list {
          *list next;
  };
#+end_src
Если ~next == NULL~ --- то конец
#+end_examp
#+begin_examp
Дерево:
#+begin_src C
    struct tree {
            tree* left;
            tree* right;
            int value;
    };
#+end_src
#+end_examp

#+begin_definition org
*Отмеченное(дизъюнктное)* объединение множеств: \\
- \(A, B\) --- множества
- \(A \sqcup B = \{\langle ``A``, a \rangle| a\in A\}\cup\{\langle ``B``, a \rangle | b \in B\}\)
Пусть \(S \in A \sqcup B\). Мы знаем откуда \(S\)
#+end_definition
#+begin_src haskell
    data List a = Nil | Cons a (List a)
    example = Cons 1 (Cons 2 (Cons 3 Nil)) -- [1; 2; 3]
#+end_src
#+begin_src C
  union {
          int a;
          char b;
  };
#+end_src
#+begin_examp org
#+begin_export latex
\[
\frac{\Gamma \vdash \overset{\text{Nil}}{\alpha} \to \gamma\quad \Gamma \vdash \overset{\text{Cons}}{\beta} \to \gamma\quad \Gamm \vdash \alpha \vee \beta}{\Gamma \vdash \underset{\text{int}}{\gamma}}
\]
#+end_export
#+begin_src OCaml
  let rec count l (* $\alpha + \beta$ *) =
  match l with
     | Nil (* $\alpha$ *) -> 0 (* $\alpha \to \text{int}$ *)
     | Cons(hd, tl) (* $\beta$ *) -> 1 + count tl (* $\beta \to \text{int}$ *)
#+end_src
#+end_examp
** Исчисление предикатов
#+begin_definition org
Язык исчисление предикатов
- логические выражения ``предикаты``/``формулы``
- предметные выражния ``термы``
\(\Theta\) --- метаперменные для термов \\
Термы:
- Атомы:
  - \(a, b, c, d, \dots\) --- предметные переменные
  - \(x, y, z\) --- метапеременные для предметных перменных
- Функциональные Символы
  - \(f, g, h\) --- Функциональные символы(метаперемнные)
  - \(f(\Theta_1, \dots \Theta_n)\) --- применение функциональных символов
- Логические выражения: \\
  \color{gray}Если \(n = 0\), будем писать \(f, g\) --- без скобок\color{black}
  - \(P\) --- метаперменные для предикатных символов
  - \(A, B, C\) --- предикатный символ
  - \(P(\Theta_1, \dots, \Theta_n)\) --- применение предикатных символов
  - \(\&, \vee, \neg, \to\) --- Cвязки
  - \(\forall x.\varphi\) и \(\exists x.\varphi\) --- кванторы \\
    \color{gray}``<квантор> <переменная>.<выражение>``\color{black} \\
#+end_definition
*** Сокращение записи
И.В + жадность \(\forall, \exists\) \\
Метавыражение:
\[ \forall x. \color{green}(\color{black}P(x) \& \color{green}(\color{black}\forall y. P(y) \color{green}))\color{black} \]
Квантор съедает все что дают, т.е. имеет минимальный приоритет. \\
Правильный вариант(настоящее выражние):
\[ \forall a. B(A) \& \forall b. B(b) \]
** Теория моделей
Оценка формулы в исчислении предикатов:
1. Фиксируем \(D\) --- предметное множетво
2. Кажодму \(f_i(x_1, \dots, x_n)\) сопоставим функцию \(D^n \to D\)
3. Каждому \(P_j(x_1, \dots, x_m)\) сопоставим функцию(предикат) \(D^2 \to V\)
4. Каждой \(x_i\) сопоставим элемент из \(D\)
#+begin_examp org
\[\forall x.\forall y.\ E(x, y)\]
Чтобы определить формулу сначала определим \(D = \N\) 
\[ E(x, y) = \begin{cases}\text{И} & ,x = y \\ \text{Л} &, x\neq y\end{cases} \]
- \(\llbracket x \rrbracket = f_{x_i}\)
- \(\llbracket \alpha \star \beta \rrbracket\) --- смотри ИИВ
- \(\llbracket P_i(\Theta_1, \dots , \Theta_n) \rrbracket = f_{P_i}(\llbracket \Theta_1 \rrbracket, \dots, \llbracket \Theta_n \rrbracket)\)
- \(\llbracket f_j(\Theta_1 , \dots, \Theta_n ) \rrbracket = f_{f_j}(\llbracket \Theta_1 \rrbracket, \dots, \llbracket \Theta_n \rrbracket)\)
- \[ \llbracket \forall x. \varphi \rrbracket = \begin{cases} \text{И} & , \text{если } \llbracket \varphi \rrbracket^{f_x = k} = \text{И}\text{ при всех } k \in D  \\ \text{Л} &,\text{иначе}\end{cases} \]
- \[ \llbracket \exists x.\varphi \rrbracket = \begin{cases} \text{И} &, \text{если } \llbracket \varphi \rrbracket^{f_x = k} = \text{И при некотором } k \in D \\ \text{Л} &,\text{иначе} \end{cases} \]
\[ \llbracket \forall x.\forall y.E(x, y) \rrbracket = \text{Л} \]
т.к. \(\llbracket E(x, y) \rrbracket^{x:=1,\ y:=2} = \text{Л} \)
#+end_examp
#+begin_export latex
\newcommand{\colorboxed}[2]{\,\color{#1}\fbox{\color{black}#2}\color{black}\,}
#+end_export

#+begin_examp org
\[ \forall \colorboxed{green}{\varepsilon > \colorboxed{blue}{0}}\ \exists N\ \forall \colorboxed{green}{\colorboxed{blue}{n} > \colorboxed{blue}{N}}\quad \colorboxed{green}{\colorboxed{blue}{|a_n - a|} < \colorboxed{blue}{\varepsilon}} \]
Синим отмечены функциональные конструкции(термы), зеленым предикатные
\[ \forall \varepsilon. (\varepsilon > 0) \to \exists N. \forall n. (n > N) \to (|a_n - a| < \varepsilon) \]
Обозначим:
- \((>)(a, b) = G(a, b)\) --- предикат
- \(|\bullet|(a) = m_|(a)\)
- \((-)(a, b) = m_-(a, b)\)
- \(0() = m_0\)
- \(a_\bullet(n) = m_a(n)\)
\[ \forall e. \colorboxed{green}{G(\colorboxed{blue}{e}, \colorboxed{blue}{m_0})} \to \exists n_0.\forall n. \colorboxed{green}{G(n, n_0)}\to \colorboxed{green}{G\bigg(e, \colorboxed{blue}{m_|\Big(m_- \big(m_a(n), a\big)\Big)}\bigg)} \]
#+end_examp
** Теория доказательств
Все аксимомы И.В + M.P.
- (cхема 11) :: \((\forall x. \varphi) \to \varphi[x:=\Theta]\)
- (схема 12) :: \(\varphi[x:=\Theta]\to \exists x. \varphi\)
Если \(\Theta\) свободен для подстановки вместо \(x\) в \(\varphi\).
#+begin_definition org
*Свободен для подстановки* --- никакое свободное вхождение \(x\) в \(\Theta\) не станет связанным
#+end_definition
#+begin_examp org
\-
#+begin_src C
  int y;
  int f(int x) {
          x = y;
  }
#+end_src
Заменим ~y := x~. Код сломается, т.к. у нас нет свобод для подстановки
#+end_examp
- (Правило \(\forall\)) :: \[\frac{\varphi \to \psi}{\varphi \to \forall x. \psi}\]
- (Правило \(\exists\)) :: \[ \frac{\psi \to \varphi}{\exists x.\psi \to \varphi} \]
В обоих правилах \(x\) не входит свободно в \(\varphi\)
#+begin_examp org
\[ \frac{x = 5 \to x^2 = 25}{x = 5 \to \forall x. x^2 = 25} \]
Между \(x\) и \(x^2\) была связь, мы ее разрушили. Нарушено ограничение
#+end_examp
#+begin_examp org
\[ \exists y. x = y \]
\[ \forall x. \exists y. x = y \to \exists y. y + 1 = y \]
Делаем замену ~x := y+1~. Нарушено требование свобод для подстановки. \(y\) входит в область действия квантора \(\exists\) и поэтому свободная переменная \(x\) стала связанная.
#+end_examp

