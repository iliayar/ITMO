-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Grammar.y
-----------------------------------------------------------------------------

state 28 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseFile -> File                           (0)
	File -> Proof                                      (1)
	Proof ->                                           (2)
	Proof -> Line Proof                                (3)
	Indent ->                                          (4)
	Indent -> indent Indent                            (5)
	Line -> Indent Context '|-' TypedExpression rule   (6)
	TypedExpression -> Expression ':' Type             (7)
	Context -> ContextPrime                            (8)
	ContextPrime ->                                    (9)
	ContextPrime -> var ':' Type                       (10)
	ContextPrime -> var ':' Type ',' ContextPrime      (11)
	Type -> '(' Type ')'                               (12)
	Type -> Monotype                                   (13)
	Type -> forall var '.' Type                        (14)
	Monotype -> var                                    (15)
	Monotype -> '(' Monotype ')'                       (16)
	Monotype -> Monotype '->' Monotype                 (17)
	Expression -> lambda var '.' Expression            (18)
	Expression -> Application lambda var '.' Expression   (19)
	Expression -> let var '=' Expression in Expression   (20)
	Expression -> Application                          (21)
	Application -> Atom                                (22)
	Application -> Application Atom                    (23)
	Atom -> '(' Expression ')'                         (24)
	Atom -> var                                        (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	var            { TokenVar $$ }
	rule           { TokenRule $$ }
	indent         { TokenIndent }
	forall         { TokenForall }
	let            { TokenLet }
	in             { TokenIn }
	'.'            { TokenDot }
	':'            { TokenColon }
	'->'           { TokenArrow }
	'|-'           { TokenVdash }
	','            { TokenComma }
	'='            { TokenAssign }
	lambda         { TokenLambda }
	'('            { TokenLParen }
	')'            { TokenRParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseFile rule  0
	File            rule  1
	Proof           rules 2, 3
	Indent          rules 4, 5
	Line            rule  6
	TypedExpression rule  7
	Context         rule  8
	ContextPrime    rules 9, 10, 11
	Type            rules 12, 13, 14
	Monotype        rules 15, 16, 17
	Expression      rules 18, 19, 20, 21
	Application     rules 22, 23
	Atom            rules 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseFile -> . File                          (rule 0)

	var            reduce using rule 4
	indent         shift, and enter state 5
	'|-'           reduce using rule 4
	%eof           reduce using rule 2

	File           goto state 6
	Proof          goto state 2
	Indent         goto state 3
	Line           goto state 4

State 1

	File -> . Proof                                     (rule 1)

	indent         shift, and enter state 5

	Proof          goto state 2
	Indent         goto state 3
	Line           goto state 4

State 2

	File -> Proof .                                     (rule 1)

	%eof           reduce using rule 1


State 3

	Line -> Indent . Context '|-' TypedExpression rule    (rule 6)

	var            shift, and enter state 11
	'|-'           reduce using rule 9

	Context        goto state 9
	ContextPrime   goto state 10

State 4

	Proof -> Line . Proof                               (rule 3)

	var            reduce using rule 4
	indent         shift, and enter state 5
	'|-'           reduce using rule 4
	%eof           reduce using rule 2

	Proof          goto state 8
	Indent         goto state 3
	Line           goto state 4

State 5

	Indent -> indent . Indent                           (rule 5)

	var            reduce using rule 4
	indent         shift, and enter state 5
	'|-'           reduce using rule 4

	Indent         goto state 7

State 6

	%start_parseFile -> File .                          (rule 0)

	%eof           accept


State 7

	Indent -> indent Indent .                           (rule 5)

	var            reduce using rule 5
	'|-'           reduce using rule 5


State 8

	Proof -> Line Proof .                               (rule 3)

	%eof           reduce using rule 3


State 9

	Line -> Indent Context . '|-' TypedExpression rule    (rule 6)

	'|-'           shift, and enter state 13


State 10

	Context -> ContextPrime .                           (rule 8)

	'|-'           reduce using rule 8


State 11

	ContextPrime -> var . ':' Type                      (rule 10)
	ContextPrime -> var . ':' Type ',' ContextPrime     (rule 11)

	':'            shift, and enter state 12


State 12

	ContextPrime -> var ':' . Type                      (rule 10)
	ContextPrime -> var ':' . Type ',' ContextPrime     (rule 11)

	var            shift, and enter state 24
	forall         shift, and enter state 25
	'('            shift, and enter state 26

	Type           goto state 22
	Monotype       goto state 23

State 13

	Line -> Indent Context '|-' . TypedExpression rule    (rule 6)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	TypedExpressiongoto state 14
	Expression     goto state 15
	Application    goto state 16
	Atom           goto state 17

State 14

	Line -> Indent Context '|-' TypedExpression . rule    (rule 6)

	rule           shift, and enter state 38


State 15

	TypedExpression -> Expression . ':' Type            (rule 7)

	':'            shift, and enter state 37


State 16

	Expression -> Application . lambda var '.' Expression    (rule 19)
	Expression -> Application .                         (rule 21)
	Application -> Application . Atom                   (rule 23)

	var            shift, and enter state 18
	in             reduce using rule 21
	':'            reduce using rule 21
	lambda         shift, and enter state 36
	'('            shift, and enter state 21
	')'            reduce using rule 21

	Atom           goto state 35

State 17

	Application -> Atom .                               (rule 22)

	var            reduce using rule 22
	in             reduce using rule 22
	':'            reduce using rule 22
	lambda         reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22


State 18

	Atom -> var .                                       (rule 25)

	var            reduce using rule 25
	in             reduce using rule 25
	':'            reduce using rule 25
	lambda         reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25


State 19

	Expression -> let . var '=' Expression in Expression    (rule 20)

	var            shift, and enter state 34


State 20

	Expression -> lambda . var '.' Expression           (rule 18)

	var            shift, and enter state 33


State 21

	Atom -> '(' . Expression ')'                        (rule 24)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	Expression     goto state 32
	Application    goto state 16
	Atom           goto state 17

State 22

	ContextPrime -> var ':' Type .                      (rule 10)
	ContextPrime -> var ':' Type . ',' ContextPrime     (rule 11)

	'|-'           reduce using rule 10
	','            shift, and enter state 31


State 23

	Type -> Monotype .                                  (rule 13)
	Monotype -> Monotype . '->' Monotype                (rule 17)

	rule           reduce using rule 13
	'->'           shift, and enter state 30
	'|-'           reduce using rule 13
	','            reduce using rule 13
	')'            reduce using rule 13


State 24

	Monotype -> var .                                   (rule 15)

	rule           reduce using rule 15
	'->'           reduce using rule 15
	'|-'           reduce using rule 15
	','            reduce using rule 15
	')'            reduce using rule 15


State 25

	Type -> forall . var '.' Type                       (rule 14)

	var            shift, and enter state 29


State 26

	Type -> '(' . Type ')'                              (rule 12)
	Monotype -> '(' . Monotype ')'                      (rule 16)

	var            shift, and enter state 24
	forall         shift, and enter state 25
	'('            shift, and enter state 26

	Type           goto state 27
	Monotype       goto state 28

State 27

	Type -> '(' Type . ')'                              (rule 12)

	')'            shift, and enter state 49


State 28

	Type -> Monotype .                                  (rule 13)
	Monotype -> '(' Monotype . ')'                      (rule 16)
	Monotype -> Monotype . '->' Monotype                (rule 17)

	'->'           shift, and enter state 30
	')'            shift, and enter state 48
			(reduce using rule 13)



State 29

	Type -> forall var . '.' Type                       (rule 14)

	'.'            shift, and enter state 47


State 30

	Monotype -> Monotype '->' . Monotype                (rule 17)

	var            shift, and enter state 24
	'('            shift, and enter state 46

	Monotype       goto state 45

State 31

	ContextPrime -> var ':' Type ',' . ContextPrime     (rule 11)

	var            shift, and enter state 11
	'|-'           reduce using rule 9

	ContextPrime   goto state 44

State 32

	Atom -> '(' Expression . ')'                        (rule 24)

	')'            shift, and enter state 43


State 33

	Expression -> lambda var . '.' Expression           (rule 18)

	'.'            shift, and enter state 42


State 34

	Expression -> let var . '=' Expression in Expression    (rule 20)

	'='            shift, and enter state 41


State 35

	Application -> Application Atom .                   (rule 23)

	var            reduce using rule 23
	in             reduce using rule 23
	':'            reduce using rule 23
	lambda         reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23


State 36

	Expression -> Application lambda . var '.' Expression    (rule 19)

	var            shift, and enter state 40


State 37

	TypedExpression -> Expression ':' . Type            (rule 7)

	var            shift, and enter state 24
	forall         shift, and enter state 25
	'('            shift, and enter state 26

	Type           goto state 39
	Monotype       goto state 23

State 38

	Line -> Indent Context '|-' TypedExpression rule .    (rule 6)

	var            reduce using rule 6
	indent         reduce using rule 6
	'|-'           reduce using rule 6
	%eof           reduce using rule 6


State 39

	TypedExpression -> Expression ':' Type .            (rule 7)

	rule           reduce using rule 7


State 40

	Expression -> Application lambda var . '.' Expression    (rule 19)

	'.'            shift, and enter state 54


State 41

	Expression -> let var '=' . Expression in Expression    (rule 20)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	Expression     goto state 53
	Application    goto state 16
	Atom           goto state 17

State 42

	Expression -> lambda var '.' . Expression           (rule 18)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	Expression     goto state 52
	Application    goto state 16
	Atom           goto state 17

State 43

	Atom -> '(' Expression ')' .                        (rule 24)

	var            reduce using rule 24
	in             reduce using rule 24
	':'            reduce using rule 24
	lambda         reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24


State 44

	ContextPrime -> var ':' Type ',' ContextPrime .     (rule 11)

	'|-'           reduce using rule 11


State 45

	Monotype -> Monotype . '->' Monotype                (rule 17)
	Monotype -> Monotype '->' Monotype .                (rule 17)

	rule           reduce using rule 17
	'->'           shift, and enter state 30
	'|-'           reduce using rule 17
	','            reduce using rule 17
	')'            reduce using rule 17


State 46

	Monotype -> '(' . Monotype ')'                      (rule 16)

	var            shift, and enter state 24
	'('            shift, and enter state 46

	Monotype       goto state 51

State 47

	Type -> forall var '.' . Type                       (rule 14)

	var            shift, and enter state 24
	forall         shift, and enter state 25
	'('            shift, and enter state 26

	Type           goto state 50
	Monotype       goto state 23

State 48

	Monotype -> '(' Monotype ')' .                      (rule 16)

	rule           reduce using rule 16
	'->'           reduce using rule 16
	'|-'           reduce using rule 16
	','            reduce using rule 16
	')'            reduce using rule 16


State 49

	Type -> '(' Type ')' .                              (rule 12)

	rule           reduce using rule 12
	'|-'           reduce using rule 12
	','            reduce using rule 12
	')'            reduce using rule 12


State 50

	Type -> forall var '.' Type .                       (rule 14)

	rule           reduce using rule 14
	'|-'           reduce using rule 14
	','            reduce using rule 14
	')'            reduce using rule 14


State 51

	Monotype -> '(' Monotype . ')'                      (rule 16)
	Monotype -> Monotype . '->' Monotype                (rule 17)

	'->'           shift, and enter state 30
	')'            shift, and enter state 48


State 52

	Expression -> lambda var '.' Expression .           (rule 18)

	in             reduce using rule 18
	':'            reduce using rule 18
	')'            reduce using rule 18


State 53

	Expression -> let var '=' Expression . in Expression    (rule 20)

	in             shift, and enter state 56


State 54

	Expression -> Application lambda var '.' . Expression    (rule 19)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	Expression     goto state 55
	Application    goto state 16
	Atom           goto state 17

State 55

	Expression -> Application lambda var '.' Expression .    (rule 19)

	in             reduce using rule 19
	':'            reduce using rule 19
	')'            reduce using rule 19


State 56

	Expression -> let var '=' Expression in . Expression    (rule 20)

	var            shift, and enter state 18
	let            shift, and enter state 19
	lambda         shift, and enter state 20
	'('            shift, and enter state 21

	Expression     goto state 57
	Application    goto state 16
	Atom           goto state 17

State 57

	Expression -> let var '=' Expression in Expression .    (rule 20)

	in             reduce using rule 20
	':'            reduce using rule 20
	')'            reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 15
Number of non-terminals: 13
Number of states: 58
