* DONE spbctf_4_x86_64

Свапает ~permutation[input[i]]~ и ~permutation[input[i] + 1]~, проверяет что ~permuation~ отсорченый

#+begin_src python :results output
arr = [8, 7, 5, 4, 1, 3, 2, 6, 9, 10]
res = []
for i in range(len(arr)):
    for j in range(len(arr) - 1):
        if arr[j] > arr[j + 1]:
            res.append(j)
            arr[j + 1], arr[j] = arr[j], arr[j + 1]

print(''.join(map(lambda x: str(x), res)))
#+end_src

#+RESULTS:
: 012345601234501230121

* DONE s2.out
* DONE spbctf_2_x86
#+begin_src 
497 1207 1273 871 476 884 1615 475 2233 231 505 1919 190 2755 231 561
#+end_src
Каждая пара чисел это ~x * prime1~ и ~x * prime2~, где ~x~ число из ввода, а
~prime1, prime2~ два различных простых числа

#+begin_src python
import math
arr = [497, 1207, 1273, 871, 476, 884, 1615, 475, 2233, 231, 505, 1919, 190, 2755, 231, 561]
res = ''


for i in range(0, len(arr), 2):
    res += chr(math.gcd(arr[i], arr[i + 1]))

return res
#+end_src

#+RESULTS:
: GCD_Me_!

* DONE cosy
#+begin_src python :results output
import math
arr = [3089, 9659, 174, 9993, 3255, 9961, 5876, 8910, 6155, 9986, 4382, 7880, 1218, 8660, 3255, 8746, 6155, 9781, 4999, 9455, 1218, 7987]
res = ''
for (i, x) in enumerate(arr):
    if i % 2 == 0:
        c = math.asin(x / 10000.) * 180. / math.pi
    else:
        c = math.acos(x / 10000.) * 180. / math.pi
    c = round(c)
    if c == 36:
        res += '{'
    elif c == 37:
        res += '}'
    elif c == 38:
        res += '_'
    elif c <= 25:
        res += chr(c + ord('a'))
    else:
        res += chr(c + 0x16)
print(res) 
#+end_src

#+RESULTS:
: spbctf{1_d0_h4t3_m4th}


* sparta
#+begin_src python :results output
s = "st_3phr_b13gcsvut_3yf1rz{55}"
res = [0]*len(s)
k = 0
for i in range(7):
    for j in range(i, len(s), 7):
        res[j] = ord(s[k])
        k += 1


print(''.join(map(lambda x: chr(x), res)))
#+end_src

#+RESULTS:
: spbctf{th1s_15_r3v3r53_guyz}
