#+LATEX_CLASS: general
#+TITLE: Вопросы к зачету
#+AUTHOR: Ilya Yaroshevskiy
#+LATEX_HEADER_EXTRA: \newcommand{\F}{\mathcal{F}}

* Бестиповое лямбда-исчисление
#+include: "2.org::Бестиповое лямбда-исчисление"
* Общие определения (альфа-эквивалентность, бета-редукция, бета-эквивалентность)
#+include: "2.org::Общие определения альфа-эквивалентность"
#+include: "2.org::Общие определения бета-редукция"
#+begin_definition org
\(\beta\)-эквивалентность (\(=_\beta\)) --- транзитивное, рефлексивное, симметричное замыкание отношения \(\beta\)-редукции.
#+end_definition
* Параллельная бета-редукция
#+include: "2.org::Параллельная бета-редукция"
* Теорема Чёрча-Россера
#+include: "2.org::Теорема Чёрча-Россера_def"
#+include: "2.org::Теорема Чёрча-Россера_romb"
#+include: "2.org::Теорема Чёрча-Россера"
* Нормальный и аппликативный порядок редукций
#+include: "2.org::Нормальный порядок редукций"
#+include: "2.org::Аппликативный порядок редукций"
* *Y*-комбинатор
#+begin_definition org
*\(Y\)-комбинатор* \(\coloneqq \lambda f.(\lambda x.f\ (x\ x)) (\lambda x.f\ (x\ x))\)
#+end_definition
* Нетипизируемость *Y*-комбинатора
#+begin_theorem org
\(Y\)-комбинатор не типизируется в просто типизированном по Карри \(\lambda\)-исчислении
#+end_theorem
* Слабая и сильная нормализация
#+include: "5.org::Слабая нормализация"
#+include: "5.org::Сильная нормализация"
* Парадокс Карри, парадокс при интерперетации бестипового лямбда-исчисления как логики
#+include: "3.org::Парадокс Карри"
* Импликационный фрагмент ИИВ
#+include: "4.org::Импликационный фрагмент ИИВ"
* Теорема о замкнутости И.Ф. относительно доказуемости
#+include: "4.org::Теорема о замкнутости И.Ф. относительно доказуемости_symb"
#+include: "4.org::Теорема о замкнутости И.Ф. относительно доказуемости"
* Комбинаторы, базис SKI, его аналог в логике
#+include: "2.org::Комбинаторы_I"
#+include: "2.org::Комбинаторы_I_K_Omega"
#+include: "2.org::Комбинаторы_I_K_Omega_2"
#+begin_definition org
\-
- \(S \coloneqq \lambda x. \lambda y. \lambda z. x\ z\ (y\ z)\)
- \(K \coloneqq \lambda x. \lambda y. x\)
- \(I \coloneqq \lambda x. x\)
#+end_definition
#+begin_statement org
Любое \(\lambda\)-выражение без свободных перменных можно записать с помощью комбинаторов \(S\) и \(K\), где:
- \(S = \lambda x. \lambda y. \lambda z. (x\ z)\ (y\ z) : (\alpha \rightarrow \beta \rightarrow \gamma) \rightarrow (\alpha \rightarrow \beta) \rightarrow \alpha \rightarrow \gamma\)
- \(K = \lambda x. \lambda y. x : \alpha \rightarrow \beta \rightarrow \alpha\)
#+end_statement
#+begin_statement org
Комбинаторы \(S\) и \(K\) являются аксиомами ИИВ
#+end_statement
* Просто типизированное лямбда-исчисление
#+include: "3.org::Просто типизированное лямбда-исчисление"
* Исчисление по Чёрчу и по Карри
#+include: "3.org::Исчисление по Карри"
#+include: "3.org::Исчисление по Чёрчу"
#+begin_remark org
Отличие только в том, что в исчисление по Черчу типовые аннотации
обязательны, это позволяет доказать следующую теорему.
#+end_remark
#+include: "3.org::Исчисление по Чёрчу и по Карри_theorem_church"
#+include: "3.org::Исчисление по Чёрчу и по Карри_theorem_church_examp_2"
#+include: "3.org::Исчисление по Чёрчу и по Карри_theorem_church_examp"
* Изоморфизм Карри-Ховарда
#+include: "4.org::Изоморфизм Карри-Ховарда"
* Конъюнкция, дизъюнкция, ложь и соответствующие им конструкции в лямбда-исчислении
#+begin_definition org
Введем тип \(\perp\):
\[ \frac{\Gamma \vdash A : \perp}{\Gamma \vdash A : \tau} \]
И остальные конструкции и правила для них:
- \(\varphi \& \psi\)
  - \(\mathop{mkPair} \coloneqq \lambda x. \lambda y. \lambda f. f\ x\ y\), тогда \(\pair{x, y} = \mathop{mkPair}\ x\ y\)
  - \(\pi_1 \coloneqq \lambda p. p\ (\lambda a. \lambda b. a)\)
  - \(\pi_2 \coloneqq \lambda p. p\ (\lambda a. \lambda b. b)\)
  \[ \frac{\Gamma \vdash A : \varphi \quad \Gamma \vdash B : \psi}{\Gamma \vdash \pair{A, B} : \varphi \& \psi} \quad
  \frac{\Gamma \vdash \pair{A, B} : \varphi \& \psi}{\Gamma \vdash \pi_1\ \pair{A, B} : \varphi} \quad
  \frac{\Gamma \vdash \pair{A, B} : \varphi \& \psi}{\Gamma \vdash \pi_2\ \pair{A, B} : \psi} \]
- \(\varphi \lor \psi\)
  - \(\mathop{in}_1 \coloneqq \lambda x. \lambda f. \lambda g. f\ x\)
  - \(\mathop{in}_2 \coloneqq \lambda x. \lambda f. \lambda g. g\ x\)
  - \(\mathop{case} \coloneqq \lambda a. \lambda f. \lambda g. a\ f\ g\)
  \[ \frac{\Gamma \vdash A : \varphi}{\Gamma \vdash \mathop{in}_1\ A : \varphi \lor \psi} \quad
  \frac{\Gamma \vdash A : \psi}{\Gamma \vdash \mathop{in}_2\ A : \varphi \lor \psi} \quad
  \frac{\Gamma \vdash L : \varphi \lor \psi \quad \Gamma \vdash f : \varphi \rightarrow \tau \quad \Gamma \vdash g : \psi \rightarrow \tau}{\Gamma \vdash \mathop{case}\ L\ f\ g : \tau}\]
#+end_definition
* Чёрчевские нумералы
#+include: "1.org::Чёрчевские нумералы"
* Теорема о выразительной силе просто типизированного лямбда-исчисления (формулировка)
#+include: "2.org::Теорема о выразительной силе просто типизированного лямбда-исчисления (формулировка)"
* Алгебраические термы
#+include: "5.org::Алгебраические термы"
#+include: "5.org::Алгебраические термы_examp"
#+include: "5.org::Подстановка переменных"
* Задача унификации в алгебраических термах
См [[Алгебраические термы][Алгебраические термы]] и [[Алгоритм унификации][Алгоритм унификации]].
* Алгоритм унификации
#+include: "5.org::Несовместная система"
#+include: "5.org::Алгоритм унификации"
* Наиболее общее решение задачи унификации
#+include: "5.org::Наиболее общее решение задачи унификации_def2"
#+include: "5.org::Наиболее общее решение задачи унификации_def1"
#+include: "5.org::Наиболее общее решение задачи унификации"
* Задачи проверки типа, реконструкции (вывода) типа, обитаемости типа в просто типизированном лямбда-исчислении, их аналоги в ИИВ
#+include: "4.org::Задачи проверки типа, реконструкции (вывода) типа, обитаемости типа в просто типизированном лямбда-исчислении"
* Алгоритм нахождения типа в просто типизированном лямбда-исчислении
#+include: "5.org::Алгоритм нахождения типа в просто типизированном лямбда-исчислении"
* TODO Наиболее общий тип, наиболее общая пара
* Логика второго порядка
#+include: "5.org::Логика второго порядка"
* Выразимость связок через импликацию и квантор всеобщности в интуиционистской логике 2-го порядка (конъюнкция, дизъюнкция, ложь, отрицание, квантор существования)
#+include: "5.org::Выразимость связок через импликацию и квантор всеобщности в интуиционистской логике 2-го порядка (конъюнкция, дизъюнкция, ложь, отрицание, квантор существования)"
* TODO Простая модель для логики второго порядка
* Система \(F\)
#+include: "5.org::Система \(F\)"
* TODO Изоморфизм Карри-Ховарда для системы \(F\): квантор всеобщности, упорядоченные пары, алгебраические типы
Может [[Конъюнкция, дизъюнкция, ложь и соответствующие им конструкции в лямбда-исчислении][это]]?
* Экзистенциальные типы
#+include: "6.org::Экзистенциальные типы"
#+include: "6.org::Экзистенциальные типы_stack"
* Конструкции ~pack~ и ~abstype~
#+include: "6.org::Конструкции ~pack~ и ~abstype~"
#+include: "6.org::Конструкции ~pack~ и ~abstype~_examp1"
#+include: "6.org::Конструкции ~pack~ и ~abstype~_examp2"
* TODO Абстрактные типы данных
#+include: "6.org::Абстрактные типы данных"
* Ранг типа
#+include: "7.org::Ранг типа"
* Частный случай типа
#+include: "7.org::Частный случай типа"
* TODO Типы и типовые схемы
* Типовая система Хиндли-Милнера
#+include: "7.org::Типовая система Хиндли-Милнера"
#+include: "7.org::Типовая система Хиндли-Милнера_axioms"
* Алгоритм W
#+include: "7.org::Алгоритм W"
* Типизация *Y*-комбинатора
#+include: "7.org::Типизация *Y*-комбинатора"
* Экви- и изорекурсивные типы, \(\mu\)-оператор, ~roll~ и ~unroll~
#+include: "7.org::Экви- и изорекурсивные типы, \(\mu\)-оператор, ~roll~ и ~unroll~"
* TODO Примеры конструкций и операторов в языках программирования
* Обобщённые типовые системы
#+include: "8.org::Обобщённые типовые системы"
#+include: "8.org::Обобщённые типовые системы_symb1"
#+include: "8.org::Обобщённые типовые системы_symb2"
#+include: "8.org::Обобщённые типовые системы_axioms"
* Типы, рода, сорта
#+include: "8.org::Типы, рода, сорта"
* Лямбда-куб
#+include: "8.org::Лямбда-куб"
* Краткая характеристика вершин лямбда-куба
- \((*, *)\) --- позволяет записывать термы, которые зависят от термов
- \((\square, *)\) --- позволяет записывать термы, которые зависят от типов
- \((*, \square)\) --- позволяет записывать типы, которые зависят от термов
- \((\square, \square)\) --- позволяет записывать типы, которые зависят от типов
* \(\Sigma\) и \(\Pi\) типы
- \(\Pi x : \alpha. P(x)\) --- эту запись можно читать как (в каком-то смысле
  в интуиционистском понимании): ``У меня есть метод для
  конструирования объекта типа \(P(x)\), использующий любой
  предоставленный \(x\) типа \(\alpha\)``.  Если же смотреть на эту запись с точки
  зрения классической логики, то ее можно понимать как бесконечную
  конъюнкцию \(P(x_1)\& P(x_2) \& \dots\).  Данная конъюнкция соответствует
  декартовому произведению, отсюда и название \(\Pi\)-типа (иногда в
  англоязычной литературе можно встретить /dependent function type/).
- \(\Sigma x : \alpha. P(x)\) --- Аналогично предыдущему пункту рассмотрим
  значение с интуиционистской точки зрения: ``У меня есть объект \(x\)
  типа \(\alpha\), но больше ничего про него не знаю кроме того, что он
  обладает свойством \(P(x)\)``. Это как раз в стиле интуиционизма, что нам
  приходится знать и объект \(x\) и его свойство \(P(x)\). Это можно
  представить как пару, а пара --- бинарное произведение. С точки же
  зрения классической логики, мы можем принимать эту формулу как
  бесконечную дизъюнкцию \(P(x_1) \lor P(x_2) \lor \dots\), которая соответствует
  алгебраическим типам данных. (иногда в англоязычной литературе можно
  встретить /dependent sum/).
* TODO Зависимые типы
* Функция ~printf~
#+include: "8.org::Функция ~printf~"
* TODO Интенсиональное и экстенсиональное равенства, достоинства и недостатки подходов
* Равенство как путь в топологическом пространстве
#+include: "9.org::Равенство как путь в топологическом пространстве"
* TODO Язык Аренд
* Интервальный тип, магия и ~coe~
#+include: "9.org::Интервальный тип, магия и ~coe~_coe_definition"
#+include: "9.org::Интервальный тип, магия и ~coe~_explanation"
* Стандартные функции: ~transport~, ~pmap~
#+include: "9.org::Стандартные функции: ~transport~"
#+include: "9.org::Стандартные функции: ~transport~_explanation"
#+include: "9.org::Стандартные функции: ~transport~_examp"
#+include: "9.org::Стандартные функции: ~pmap~"
* TODO Функциональная экстенсиональность, её доказуемость в Аренде
#+begin_definition org
*Функциональная экстенсиональность* --- функции, значения которых равны для всех равных значений их аргументов, равны между собой
#+end_definition
* TODO \(\Sigma\) и \(\Pi\) типы в языке Аренд
* Индуктивные типы, задание отношения \(\text{<<меньше>>}\) через индуктивные типы и через \(\Sigma\)-тип
#+include: "10.org::Индуктивные типы, задание отношения \(\text{<<меньше>>}\) через индуктивные типы и через \(\Sigma\)-тип_using_sigma"
#+include: "10.org::Индуктивные типы, задание отношения \(\text{<<меньше>>}\) через индуктивные типы и через \(\Sigma\)-тип_using_gadt"
* TODO Неравенство
#+include: "9.org::Неравенство"
* TODO Доказательство неравенств в Аренде
* Rewrite
#+include: "10.org::Rewrite"
* Каков тип типа: необходимость увеличения выразительной силы языка
#+include: "11.org::Каков тип типа: необходимость увеличения выразительной силы языка"
* TODO Типы, универсумы, пропы, множества
#+include: "11.org::пропы"
#+include: "11.org::множества"
#+include: ".org::множества_remark"
* Импредикативность
#+include: "11.org::Импредикативность"
#+include: "11.org::Импредикативность_remark_prop"
* TODO Иерархия универсумов, предикативный и гомотопический уровни
#+include: "11.org::предикативный уровни"
* Пропозициональное обрезание
#+include: "11.org::Пропозициональное обрезание"
* TODO Фактор-множества в Аренде
* TODO Конструкция ~\using \level~
* TODO Аксиома выбора и эквивалентные утверждения
#+include: "13.org::Аксиома выбора и эквивалентные утверждения"
* Конструктивная аксиома выбора и её доказуемость
#+include: "13.org::Конструктивная аксиома выбора и её доказуемость"
* Сетоиды
#+include: "13.org::Сетоиды"
* TODO Аксиома выбора как перестановка кванторов и пропозиционального обрезания
* Теорема Диаконеску
#+include: "13.org::Теорема Диаконеску"
* TODO Парадокс Бурали-Форте
см. [[https://iliayar.ru/public-notes/conspects/Term5/tt/lectures/12.pdf][лек. 12]]
* TODO Парадоксальные универсумы, идея доказательства парадокса Бурали-Форте при существовании парадоксального универсума
#+include: "12.org::Парадоксальные универсумы"
* TODO Общая идея построения парадокса Жирара в системе U
* Линейная логика
#+include: "14.org::Линейная логика"
* TODO Уникальные типы
* Комбинаторный базис \(BCKW\)
#+include: "14.org::Комбинаторный базис \(BCKW\)"
* Полиморфизм (параметрический и наследственный)
#+include: "15.org::Полиморфизм (параметрический и наследственный)"
* Отношение подтипизации
#+include: "15.org::Отношение подтипизации"
* Ко- и контравариантность.
#+include: "15.org::Ко- и контравариантность."
* Система \(F_{<:}\) Ядерное и полное правила
#+include: "15.org::Система \(F_{<:}\)"
#+include: "15.org::Ядерное и полное правила"
