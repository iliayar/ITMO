#+setupfile: setup.org
#+TITLE: Лекция 1
#+date: 6 сентября

* Введение
В начале будем рассматривать модель с общей памятью. Не важно как
работают потоки, главное что к ним применима теория вычислимости.

*Единственный* тип коммуникации --- общая память.

#+begin_definition org
*Общие переменные(регистры)* --- простейший тип общего объекта, есть:
- значение
- операции read/write
Это хорошая модель абстракции современных многопоточных ОС.
#+end_definition

#+begin_remark org
Многопоточные программы *недерминированны*. Результат работы зависит от
фактического *исполнения*. Этих исполнений может быть много. Говорим что *программа P имеет свойство A*, если программа P имеет свойство A /при любом исполнении/.
#+end_remark

#+begin_remark org
В спецификации x86 используется моель памяти *TSO*. Это тоже абстракция, но более правдивая.
#+end_remark
* Семинар
\todo
#+begin_definition org
*CAS(var, old, new)* --- Compare-And-Set. Функция проверяет что =var=
 имеет значение =old= и устанавливает ее в =new=.
#+end_definition
#+begin_examp org
#+begin_src kotlin
fun push(x: Int) {
  while(true) {
    head := H;
    newHead := newHead(|\(\dots\)|);
    if CAS(&stack, head, newHead) { return; }
  }
}
#+end_src
#+end_examp
\todo
